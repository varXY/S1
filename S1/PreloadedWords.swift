//
//  PreloadedWords.swift
//  S1
//
//  Created by 文川术 on 5/29/16.
//  Copyright © 2016 xiaoyao. All rights reserved.
//

import Foundation


struct PreloadedWords {

	let arrays = [["0", "as", "1. 用于类型判断和转换\n2. as!用于强制转换，as?用于可为空转换", "let text = \"这是一个String类型\"\nlet length = (text as NSString).lengh\n// 把String类型转换成NSString类型，获取其长度\n\nlet sentence = text as! String\n// 强制转换类型，如无法转换，则程序出错\n\nguard let string = text as? String else { return }\n// 对text进行可选转换，如无法转换，则跳过"], ["6", "get", "运算属性的getter方法，用来进行逻辑处理，可对其他储存属性进行修改，与setter方法对应", "class Square {\n    var width = 0\n    var round: Int {\n        get {\n            return width * 4\n        }\n\n        set {\n            width = newValue / 4\n        }\n    }\n}\n\nvar block = Square()\nblock.width = 8\nprint(block.round) // 输出：32\nblock.round = 16\nprint(block.width) // 输出：4\nT"], ["2", "continue", "1. 用在循环结构中，结束本次循环，忽略continue后的代码，开始下一次循环", "let numbers = [1, 2, 3]\nfor number in numbers {\n    if number == 2 {\n        continue\n    }\n    print(number)\n}\n\n// 输出1和3，不会输出2"], ["3", "deinit", "1. 析构方法，用于销毁对象、释放内存", "class Observer {\n\n    init() {\n        NSNotificationCenter.defaultCenter().addObserver(self, selector: nil, name: nil, object: nil)\n    }\n\n    deinit {\n        NSNotificationCenter.defaultCenter().removeObserver(self)\n    }\n\n}\n\n// 对象被销毁前，需要的操作在deinit {} 中执行"], ["1", "base", "find something great", "life is good"], ["2", "come", "tryr", "what is that"], ["8", "is", "类型判断关键词", "let VC = UIViewController()\nswitch VC {\ncase is UITableViewController:\n    break\ncase is UINavigationController:\n    break\ndefault: \n    break\n}\n\n// 判断VC的类型，UITableViewController, UINavigationController都继承于UIViewController\nT"], ["1", "break", "1. 在循环语句中，终止并跳出循环\n2. 终止switch语句的情况（case）", "let numbers = [1, 2, 3]\nfor number in numbers {\n    if number == 2 {\n        break // 当循环到2就终止循环\n    }\n}\n\nswitch numbers[0] {\ncase 1:\n    break // 当numbers第0个数为1时，终止switch\ndefault:\n    print(\"不是1的情况\")\n}"], ["2", "class", "1. 定义和声明一个类\n2. 定义类方法：不依赖于具体对象的方法", "// 1\nclass ColorOfNature {\n    // 2\n    class func skyBlue() -> UIColor() {\n        return UIColor.blueColor()\n    }\n\n}\n// 3\nlet skyColor = ColorOfNature.skyBlue()\n\n// 1. 定义一个名为ColorOfNature的类\n// 2. 定义一个名为skyBlue的类方法\n// 3. 使用类名+点语法调用类方法，不需要创建对象"], ["2", "case", "1. switch-case语句的组成部分，表明一种情况", "let age = random % 101 // age为0~100之间的随机数\nswitch age {\ncase 0..<18:\n    print(\"未成年人\")\ncase 18...100:\n    print(\"成年人\")\ndefault:\n    break\n}"], ["3", "default", "1. switch-case语句中case以外的情况\n2. 指代默认参数", "let age = random() % 101 // age为0~100间的随机数\n\nswitch age {\ncase 0..<18:\n    print(\"未成年人\")\ndefault:\n    print(\"成年人\")\n}\n\npublic func NSLocalizedString(key: String, tableName: String? = default, bundle: NSBundle = default, value: String = default, comment: String) -> String\n// 系统自带的 NSLocalizedString 方法使用default指代和隐藏默认参数"], ["3", "do", "1. do-while循环语句关键词\n2. do-catch循环语句关键词", "var i = 0\ndo {\n    i += 1\n} while i < 10\n// 当i等于10时停止循环\n\ndo {\n    try checkNetWorkIsOk()\n} catch let error as NSError {\n    print(error)\n}\n// do-catch用于异常处理，和带有throws关键词的方法配合使用"], ["3", "dynamicType", "1. 获取对象类型关键字", "let string = \"what a nice day\"\nlet type = string.dynamicType\nprint(type)\n\n// 输出：String"], ["3", "dynamic", "实现 KVO(Key-Value Observing) 时，用于标记要观测的对象", "class ChangingDate: NSDate {\n\n    dynamic var date = NSDate()\n\n    override func observeValueForKeyPath(keyPath: String?, ofObject object: AnyObject?, change: [String: AnyObject]?, context: UnsafeMutablePointer<Void>) {\n    // 当 date 的值变化时，这个方法会被调用\n}\n}\n\n"], ["3", "didSet", "用于观察和监视属性值变化，当属性值已经发生改变时触发", "class User {\n    \n    var name: String = \"\" {\n        didSet {\n            print(\"用户名为\" + name)\n        }\n    }\n\n    init(name: String) {\n        self.name = name\n    }\n\n}\n\nlet user = User(name: \"小明\")\n// 输出：用户名为小明"], ["4", "extension", "1. 扩展关键词，用于向一个已有的类、结构体或枚举添加新方法，也可添加计算属性\n2. 用于实现协议（protocl）", "extension UIColor {\n \n    class func myColor() -> UIColor() {\n        return UIColor(red: 220/255, green: 57/255, blue: 59/255, alpha: 1.0)\n    }\n\n}\n// 给已有类添加方法\n\nprotocol Flyable {\n    var speed: Double { get }\n}\n\nextension Flyable {\n    var speed: Double {\n        return 12.3\n    }\n}\n// 用于实现协议"], ["4", "enum", "定义枚举类型关键词", "enum Language: String {\n    case Chinese, Engilsh, Swift\n}\n\nenum Direction: Int {\n    case North\n    case South\n    case East\n    case West\n}\n\nprint(Direction.North.rawBalue)\n// 输出：0"], ["4", "else", "1. if-else循环语句关键词\n2. guard语句组成部分", "let rating: AnyObject = 4\nguard let star = rating as? Int else { return }\nprint(String(star) + \"星\")\n\nif star < 3 {\n    print(\"不好看的电影\")\n} else if star >= 3 && star < 5 {\n    print(\"还不错的电影\")\n} else {\n    print(\"非常棒的电影\")\n}\n\n// 输出：4星\n// 输出：还不错的电影\n\n"], ["5", "false", "布尔类型（Bool）值的一种，另一种是true", "let a: Bool = true\nlet b: Bool = false\nprint(a == b)\n\n// 输出: false"], ["5", "func", "定义方法的关键字", "func sayHi() {\n    print(\"what\'s up\")\n}\n\nfunc speed(time: Double, distance: Double) -> Double {\n    return distance / time\n}\n\nsayHi()\nprint(speed(10, distance: 100))\n\n// 输出：what\'s up\n// 输出：10.0"], ["5", "fallthrough", "作用：在switch-case语句中，当一个case结束后，继续执行下一个case", "var age = 3\n\nswitch age {\ncase 0...7:\n    print(\"儿童\")\n    fallthrough\ncase 3...9:\n    print(\"小孩\")\ndefault:\n    break\n}\n\n// 输出：儿童和小孩，如果没有fallthrough只输出儿童"], ["5", "for", "for-in循环语句关键词", "let array = [\"一\", \"二\", \"三\"]\nfor (index, word) in array.enumerate() {\n    print(String(index) + \" word\")\n}\n\n// 输出：0 一\n// 输出：1 二\n// 输出：2 三\n"], ["6", "guard", "判断语句关键词，判断一段代码是否该被执行", "let x: AnyObject = 3\n\nguard let y = x as? Int else { return }\n\nguard let y = y where y < 0 else {\n    // 变量不符合条件时，执行这里的代码\n    return\n}\n\n"], ["8", "import", "s", ""], ["8", "init", "s", ""], ["8", "if", "if-else判断语句关键词，写在条件前面", ""], ["8", "in", "for-in循环语句关键词，后面跟循环范围", ""], ["8", "infix", "s", ""], ["8", "inout", "s", ""], ["11", "lazy", "懒加载关键词，对象里的变量只有在用到的时候才加载，不和对象一起加载", ""], ["11", "let", "声明常量的关键词，常量一旦赋值，不可修改。与声明变量关键词var对应。", "let hometown = \"China\"\n\n// 用let给不需要改变的属性赋值\n\n\nlet score = 99\nscore += 1\n\n// 上面的+=运算无法进行，系统会报错\n"], ["11", "left", "s", ""], ["12", "mutating", "s", ""], ["13", "new", "s", ""], ["13", "none", "s", ""], ["13", "nonmutating", "s", ""], ["13", "nil", "s", ""], ["14", "operator", "s", ""], ["14", "optional", "s", ""], ["14", "override", "重写父类中的方法，用到的关键词。如果要实现父类的方法，用super关键词", "class SubViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // 在这里写父类方法被调用时要做的操作\n    }\n\n}\n\n// viewDidLoad()是UIViewController类中的方法"], ["15", "protocol", "声明协议关键词，协议是什么？\ns", ""], ["15", "postfix", "s", ""], ["15", "precedence", "s", ""], ["15", "prefix", "s", ""], ["15", "public", "s", ""], ["15", "private", "声明私有属性用到的关键词，私有属性是无法在对象外部被访问的属性，对应公开属性public", "struct Secret {\n    private let age = 17\n\n    func tellAge() -> Int {\n        return self.age\n        // 对象内部可以访问\n    }\n}\n\nlet openSecret = Secret()\nlet age = openSecret.age\n// 对象外部无法访问，无法运行，系统报错"], ["17", "return", "返回关键词，表示结束一段代码运行", ""], ["17", "rightset", "s", ""], ["18", "static", "声明静态常量的关键词", ""], ["18", "struct", "声明结构体的关键词", ""], ["18", "subscript", "s", ""], ["18", "switch", "switch-case判断语句关键词，switch后跟需要判断的对象或属性", ""], ["18", "super", "调用父类属性或方法的关键词", ""], ["18", "self", "指代对象自身", ""], ["18", "Self", "s", ""], ["19", "typealias", "用于给一个属性、方法或对象取一个别名，以方便使用和管理", ""], ["19", "try", "s", ""], ["19", "Type", "s", ""], ["19", "true", "布尔类型（Bool）值的一种，另一种是false", "let right: Bool = true\nlet wrong: Bool = false\nprint(right == !wrong)\n\n// 输出：true, !为取反操作符"], ["20", "unowned", "s", ""], ["20", "unowned(safe)", "s", ""], ["20", "unowned(unsafe)", "s", ""], ["21", "var", "声明变量关键词，变量是声明后值可以被改变的量", ""], ["22", "where", "s", ""], ["22", "while", "do-while和while循环语句关键词", ""], ["22", "weak", "声明弱应用关键词，用于避免相互强引用造成的内存泄漏", ""], ["22", "willSet", "s", ""], ["26", "#column", "s", ""], ["26", "#file", "s", ""], ["26", "#function", "s", ""], ["26", "#line", "s", ""], ["26", "#selector", "s", ""], ["0", "Array", "s", ""], ["0", "AnyObject", "s", ""], ["1", "Bool", "s", ""], ["2", "CGRect", "s", ""], ["2", "CGSize", "s", ""], ["2", "CGPoint", "s", ""], ["2", "CGAffineTransform", "s", ""], ["3", "Double", "s", ""], ["5", "Float", "s", ""], ["8", "Int", "s", ""], ["13", "NSNumber", "s", ""], ["13", "NSDate", "s", ""], ["13", "NSData", "s", ""], ["13", "NSError", "s", ""], ["13", "NSRange", "s", ""], ["13", "NSObject", "s", ""], ["13", "NSBundle", "s", ""], ["13", "NSTimeInterval", "s", ""], ["13", "NSURL", "s", ""], ["18", "Set", "s", ""], ["18", "String", "s", ""], ["21", "Void", "s", ""], ["20", "UIControl", "s", ""], ["20", "UIResponder", "s", ""], ["20", "UIWindow", "s", ""], ["20", "UIScreen", "s", ""], ["20", "UIColor", "s", ""], ["20", "UIEvent", "s", ""], ["20", "UIBezierPath", "s", ""], ["20", "UIFont", "s", ""], ["20", "UIView", "s", ""], ["20", "UITableView", "s", ""], ["20", "UIScrollView", "s", ""], ["20", "UIButton", "s", ""], ["20", "UILabel", "s", ""], ["20", "UITextField", "s", ""], ["20", "UITextView", "s", ""], ["20", "UIWebView", "s", ""], ["20", "UIViewController", "s", ""], ["20", "UINavigationController", "s", ""], ["0", "AVFoundation", "s", ""], ["0", "AddressBook", "s", ""], ["2", "CoreData", "s", ""], ["2", "Contacts", "s", ""], ["5", "Foundation", "s", ""], ["12", "MessageUI", "s", ""], ["12", "MapKit", "s", ""], ["18", "StoreKit", "s", ""], ["20", "UIKit", "s", ""], ["0", "alpha", "s", ""], ["1", "bounds", "s", ""], ["2", "CG", "s", ""], ["2", "CA", "s", ""], ["5", "frame", "s", ""], ["13", "NS", "s", ""], ["13", "navigationBar", "s", ""], ["14", "opaque", "s", ""], ["18", "statusBar", "s", ""], ["19", "tintColor", "s", ""], ["19", "toolbar", "s", ""], ["20", "UI", "s", ""]]
}