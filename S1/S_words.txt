as_1. 用于类型判断和转换\n2. as!用于强制转换，as?用于可为空转换###


break_

class_

case_

continue_

deinit_

default_

do_

dynamic_

dynamicType_

didSet

enum_

extension_

else

false_

func_

fallthrough_

for

get_

guard

### import
导入框架头文件关键词
---
import UIKit

class viewController: UIViewController {
	var string: String!
}

// 要想使用UIViewController和String类型，需要导入UIKit和Foundation, UIKit包含Foundation_@

### init
构造方法关键词，用于对象初始化的方法，初始化是类，结构体和枚举类型实例化的准备阶段
---
class Car {

	var speed: Double

	init() {
		speed = 70.0
	}

}

let car = Car()
print(car.speed)
// 输出：70.0
// 当对象初始化时，构造方法自动调用，该方法可以带参数也可以不带_@

### if
if-else判断语句关键词，后跟判断条件
---
var rating = 4
if rating < 3 {
	print("不好看的电影")
} else if rating < 5 && rating >= 3 {
	print("还不错的电影")
} else {
	print("非常棒的电影")
}

// 输出：还不错的电影


### in
1. for-in循环关键词
2. 闭包表达式关键词
---

###is
类型判断关键词
---

### inout
用于修饰函数参数，使该方法可以修改函数外变量的值
---
func changeValue(inout a: Int, inout b: Int) {
	let temp = a
	a = b
	b = temp
}

var a = 0
var b = 1
changeValue(&a, b: &b)
print(a) // 输出：1
print(b) // 输出：0

### lazy
懒加载关键词，被标示的储存属性只有在被用到时加载，不在对象初始化时加载
---
class BigData {
	var title = "short title"
	lazy var content = "this content is very very big"
}

let data = BigData()
// 此次data的content属性还没加载
let content = data.content
// 在被用到时，content才加载，懒加载的作用是提高内存使用效率

### let
声明常量关键词，常量一旦声明，无法改变，和声明变量关键词var对应
---
let homeland = "China"
// 把不需要改变的量声明为常量

let score = 99
score += 1
// 对score的+=运算无法进行，系统会报错

### mutating
1. 修饰结构体（struct）或枚举（enum）类型里方法的关键词，让该方法可以修改该类型中的变量
2. 也可以用于协议（protocol）内方法的定义和使用
---
struct Person {
	var age = 20

	mutating func grow() {
		age += 1
	}
}

let someone = Person()
someone.grow()
print(someone.age)
// 输出：21

### nonmutating
1. 修饰结构体（struct）或枚举（enum）类型里方法的关键词，让该方法无法修改该类型中的变量。如果不修饰，默认是nonmutating
2. 也可以用于协议（protocol）内方法的定义和使用
---
struct Person {
	var mom = "Lovely"

	nonmutating func changeMom() {
		mom = "Beautiful"
	}
}

// 无法这样写，系统会报错

### nil
对象值为空的情况
---
let empty: Int! = nil
var maybeEmpty: Int?
maybeEmpty = empty

print(maybeEmpty)
// 输出：nil

### optional
在协议中定义可选方法，可实现也可不实现的方法
---
@Objc protocol someType {
	func mustHave()
	optional func youDontNeedTo()
}

// 当实现协议someType时，mustHave()是必须实现的方法，youDontNeedTo()则可实现也可不实现
// 想要使用optional, 定义协议时必须用@Objc标示

### override
重载，用于子类重写父类的属性或方法
---
class OldMan {
	var firstName: String

	func goHome() {
	}
}

class YoungMan: OldMan {
	override var firstName: String {
		get {
			return super.firstName
		}

		set {
		}
	}

	override func goHome() {
		// do something different here
	}
}

### protocol
定义协议关键字，Protocol(协议)用于统一方法和属性的名称，而不实现任何功能。协议能够被类，枚举，结构体实现，满足协议要求的类，枚举，结构体被称为协议的遵循者。
---
protocol CanSaveData {
	var content: String { get }
	func save()
}

struct Notes: CanSaveData {
	var content: String {
		return "content"
		// Notes必须含有content这个变量，才能实现CanSaveData协议
	}

	func save() {
		// 要实现CanSaveData协议，Notes必须有save()方法
	}
}

### public
访问修饰符，被修饰的属性或方法是公开的，可以在任何地方访问和使用
---
struct PublicKnowledge {
	public let earthCount = 1

	public func whoIsObama() -> String {
		return "president of the united states"
	}
}

let count = PublicKnowledge().earthCount
let answer = PublicKnowledge().whoIsObama()
// public修饰的属性或方法，可以任意访问

### private
访问修饰符，被修饰的属性或方法只能在当前的Swift源文件里可以访问
---
struct Secret {
	private let salary = 0

	private func howToMakeMyselfHappy() {

	}
}

let secret = Secret()
let steal = secret.salary
let learn = secret.howToMakeMyselfHappy()
// 如果在不同的文件里写调用代码，后两行无法运行，系统报错

### return
返回关键词，表示一段代码运行结束并跳出，return后可跟返回值也可以单独return
---
func getLength(string: AnyObject) -> Int? {
	guard let text = string as? NSString else { return nil }
	return text.length
}

func printNumber(anyObject: AnyObject) {
	guard let number = anyObject as? Int else { return }
	// 如果anyObject不是Int类型，则返回，不执行下面的代码
	print(number)
}

### static
在结构体或枚举类型中，修饰静态属性，静态属性指与具体实例无关，所有实例都共享和一样的属性
---
struct RichPeople {
	static let millionaire = 1000000
	static let billionaire = 1000000000
}

let me = RichPeople.millionare
// 静态属性可以不创建实例，直接调用
// 像百万富翁这样不会改变的定义，适合做成静态属性


### struct
定义结构体关键字，结构体是Swift里一种基本数据结构单位，功能全面，算是一种轻量级的类（class）
---
struct Resolution {
	var width = 1242
	var height = 2208
	var PPI = 72
}
// 结构体的声明和使用大体上和类相似，但没有继承特性，无法作为一个对象被重复引用。

### subscript
下标，一种快捷的访问对象属性的方式，使用方法和数组或字典的使用方法类似
---
class TestClass {
	var testArray = Dictionary<Int, String>()
	subscript(index: Int) -> String {
		set {
			testArray[index] = newValue
		}
	}
}

var test = TestClass()
test[2] = "hello"
print(test.testArray)
// 输出：[2, "hello"]

### switch
switch-case判断语句组成部分，后跟要判断的对象
---
let randomNumber = random() // 任意随机数
let luckNumber = 888

switch randomNumber {
case luckNumber:
	print("中奖了！")
default:
	print("概率太低，中不了")
}

### super
在子类中，调用父类方法时使用的关键词
---
override func viewDidLoad() {
	super.viewDidLoad()
	// 重写父类方法后，又调用父类方法，这样既可以执行父类的代码，也可以在这里写子类独有的代码
	}
}

### self
在对象内部，用于指代对象自身
---
class BankAccount {
	var number: Int

	init(number: Int) {
		self.number = number
		// 前一个number指BankAccount类的属性，后一个number是构造方法的参数
	}
}

Self
在对象外部，用于指代对象自身
---
extension UIContentContainer where Self: UIViewController {
	// 仅当实现对象是UIViewController时，UIContentContainer的扩展
}

### typealias
定义类型别名的关键词，通过取一个别名，方便管理和使用
---
typealias 数字 = Int
let number: 数字 = 1
print(number)
// 输出：1。给Int类型取了个中文别名：数字。当然实际编程不建议这样中英混用

typealias simpleFuncion = () -> ()
let doNothing: simpleFuncion = {}
// 也可以给闭包取别名

### try
用于执行一些可能会抛出异常的操作。
try!是强制操作，不处理异常，try？的返回结果是Optional
通常配合do-catch语句运行可能会抛出异常的方法
---
do {
	if let dicts = try managedContext.executeFetchRequest(fetchRequest) as? [AnyObject] {
		// 当executeFetchRequest正常执行，在这里进行接下来的操作
	}
} catch {
	// 如果出现异常，则执行这里面的代码
	print("something wrong")
}

### true
布尔类型值的一种情况，另一种是false
---
let a: Bool = true
let b: Bool = false
print(a == !b)
// 输出：true. !运算符对布尔类型进行取反运算

### unowned
避免循环引用关键词，当用unowned设置一个对象，它不能为可选类型，必须在构造方法里初始化。与之对应的weak可以是可选类型，也可以为nil
---
protocol ModelObjectDelegate: class {
}

class ModelObject {
	// 可选类型默认初始值为nil
	unowned var delegate: ModelObjectDelegate

	init(delegate:ModelObjectDelegate) {
		self.delegate = delegate
	}
}

### var
定义变量关键词，初始化后的值可以改变的量为变量
---
var a: Int? = 10
a = 100
print(a) // 输出：100
a = nil
print(a) // 输出：nil

### where
类型或条件判断关键词
---
extension UIContentContainer where Self: UIViewController {
	// 判断实现UIContentContainer的对象的类型是否为UIViewController
}

let yetAnotherPoint = (1, -1)
switch yetAnotherPoint {
case let (x, y) where x == y:
	print("(\(x), \(y)) is on the line x == y")
case let (x, y) where x == -y:
	print("(\(x), \(y)) is on the line x == -y")
}
// 输出： "(1, -1) is on the line x == -y"

### while
do-while、while循环语句关键词，while后面跟循环的条件
---
var i = 0
do {
	i += 1
} while i < 100
print(i) // 输出：100

while i < 100 {
	i += 1 // 输出：100
}
// do-while和while循环语句的区别是：前者在循环开始前判断条件，后者在循环结束后判断条件决定是否开始下一次循环

### weak
声明弱引用关键词，用于避免循环引用导致的内存泄露。被声明的对象是可选类型，也可以为nil
---
@objc protocol RequestHandler {
	optional func requestFinished()
}
class Request {
	weak var delegate: RequestHandler!;

	func gotResponse() {
		delegate?.requestFinished?()
	}
}
// 把delegate用weak标示，可以确保当Request不再被使用时，可顺利从内存中销毁

### willSet
给属性添加观察者。当属性值将要改变时，触发willSet里的代码
---
var age = 20 {
	willSet {
		print("I'm no longer" + String(oldValue))
	}
}

age = 21
// 输出："I'm no longer 20"

### #column
所在列数的字面表达式，是Int类型
---
print(#column)
// 输出：1。说明上面一行代码的开头在文件的第一列

### #file
所在文件名的字面表达式，是String类型
---
print(#file)
// 输出：/user/开发常见词汇.swift
// 输出的将是文件位置和文件名

### #function
所在声明的名字，String类型
在函数中会返回当前函数的名字，在方法中会返回当前方法的名字，在属性的存取器中会返回属性的名字
---
func thisIsASimpleFunction() {
	print(#function)
}

thisIsASimpleFunction()
// 输出：thisIsASimpleFunction()

### #line
所在的行数的字面表达式，Int类型
---
print(#line)
// 输出：6。说明上面一行在文件的第六行

### #selector
调用方法的关键词，通常在给按钮添加点击事件时使用
---
let button = UIBarButtonItem(barButtonSystemItem: .Add, target: self, action: #selector(buttonTapped))
// 其中buttonTapped是对象（self）中的无参方法
// Swift2.2后，这样调用可以自动对方法进行检查，确保不出错

### Array
数组，集合类型，用来按顺序存储相同类型数据
---
var intList: [Int] = [10, 11, 12]
var array: Array
var emptyArray = []
var intList_1 = Array<Int>()
// 数组的声明形式很宽泛

var list = ["hello", "world"]
print(list[0] + list[1])
// 输出："hello world"
// 数组的数据是有顺序位置的，通过位置编号访问和修改元素

### AnyObject
指代任意数据类型，可为空
---
let Anything: [AnyObject] = [3, "String", 3.5, true, [2, 3]]
if let string = Anything[1] as? String {
	// AnyObject是用来指代其他类型，调用得先进行类型转换
}

var a: AnyObject = 3
a = "String"
print(a)
// 指代的类型可以变更


### Bool
布尔类型，值只能为true或false
Bool?是可选类型，值可为nil
---
let raining = false
raining ? print("带雨伞") : print("不带雨伞")
// 输出：不带雨伞

let number = 3
let equal: Bool = number == 3
print(equal)
// 输出：true
// 比较运算符==输出一个布尔类型结果

### CGRect
包含控件位置和大小信息的结构体，控件的frame、bounds属性是CGRect类型
---
let button = UIButton()
button.frame = CGRect(x: 10, y: 10, width: 100, height: 100)
let differentRect: CGRect = CGRectMake(0, 0, 100, 100)
button.bounds = differentRect

// 控件的frame和bounds属性包含了控件的x、y坐标，宽和高信息。

### CGSize
包含控件大小信息的结构体，有宽和高两个属性。
---
let view = UIView()
view.frame.size = CGSize(width: 200, height: 200)
let newSize: CGSize = CGSize(width: 300, height: 300)
view.frame.size = newSize
view.frame.size.width = 400
view.frame.size.height = 800

// UIView的frame属性类型是CGRect，CGRect里的size属性类型是CGSize

### CGPoint
包含控件位置信息的结构体，有x和y两个属性
代表控件最左上角一点的x坐标和y坐标
---
let label = UILabel()
label.frame.origin = CGPoint(x: 20, y: 20)
label.frame.origin.x = 30
label.frame.origin.y = 60

// UIView的frame属性类型是CGRect，CGRect里的origin属性类型是CGPoint

### CGAffineTransform
字面意思仿射转换，包含控件缩放、旋转、平移等转换信息的结构体
---
let view = UIView()
view.transform = CGAffineTransformMakeScale(0.8, 0.8)
// 让view缩小为原大小的0.8

view.transform = CGAffineTransformMakeRotation(CGFloat(180 * M_PI / 180))
// 让view旋转180度

view.transform = CGAffineTransformMakeTranslation(100, 100)
// 让view向右和向下移动100个像素

// UIView的transform属性是CGAffineTransform类型

### Double
64位的浮点数字类型，浮点指有小数点
当需要存储很大或者精度很高的浮点数时，使用此类型
---
let int: Int = 12
let double: Double = 12
print(int) // 输出：12
print(double) // 输出：12.0

let double = -2342348347.234230948203948

### Float
32位的浮点数字类型，浮点指有小数点，当存储大小和精度要求不高用此类型
常用的CGFloat, 可以算是Float同时也是Double类型的别名，它能很好兼容64位系统
---
let float: Float = 13421
var value: CGFloat = 3423.34342342342342
value = CGFloat(float)
print(value)
// 输出：13421.0

### Int
整形，指没有小数点的整数类型
按照位数衍生的有Int8, Int16, Int32, Int64. 分别对应不同的最大长度
Int可以是正数和负数，UInt只能是正数
---
let int: Int = 100000
let int64: Int64 = -2342342342342534234223
let positive: UInt = 123456

print(Int8.max) // 输出：127
print(UInt8.max) // 输出：255

### NSNumber
用来存储数字值的类型，可以存储char a signed or unsigned char, short int, int, long int, long long int, float, or double or as a BOOL
---
import Foundation
import CoreData

extension SwiftDict {

@NSManaged var index: NSNumber?
@NSManaged var word: String?

}
// CoreData里默认数字类型是NSNumber
// NSNumber的兼容性好，对于任何类型的数字对象都能用它来声明

### NSDate
提供和处理日期和时间的类
---
let today = NSDate()
let yesterday = NSDate(timeIntervalSinceNow: -86400)
print(today) // 输出：2016-06-01 02:22:27 +0000
print(yesterday) // 输出：2016-05-31 02:22:27 +0000

// NSDate的默认是UTC全球时间

let formatter = NSDateFormatter()
formatter.dateFormat = "yyyy-MM-dd, HH:mm:ss"
let localDate = formatter.stringFromDate(today)
print(localDate) // 输出：2016-06-01, 10:22:27

// 想要输出本地时间，要用到NSDateFormatter



### NSData
二进制数据流类型，创建后不可修改，在文件操作，网络，以及核心图形图像中使用较广泛
NSMutableData可以修改
---
let string = "你好你好你好"
let data: NSData = string.dataUsingEncoding(NSUTF8StringEncoding)!
let newString = String.init(data: data, encoding: NSUTF8StringEncoding)!
print(newString)

// 输出："你好你好你好"

### NSError
基础框架提供的用于处理异常和错误的类
---
func saveContext () {
	if managedObjectContext.hasChanges {
		do {
			try managedObjectContext.save()
		} catch {
			let nserror = error as NSError
			NSLog("Unresolved error \(nserror), \(nserror.userInfo)")
			abort()
		}
	}
}
// 与do-catch语句配合使用，当抛出错误，创建NSError对象获取错误信息

### NSRange
用于表示范围的结构体，有两个属性：起始点（location）和长度（length）
Swift新增Range，和NSRange相识，但不可通用
---
let nsString: NSString = "this is a short text"
let nsRange: NSRange = nsString.rangeOfString("short")
print(nsRange)
// 输出：(10,5)

let text = "this is a long text"
let range = text.rangeOfString("long")!
print(range)
// 输出：10..<14

### NSObject
基础类，大部分OC开始有的类继承于NSObject
---
public class UIResponder : NSObject {
}

public class UIView : UIResponder  {
}

public class UIViewController : UIResponder  {
}

// 以上的类都继承于一个基础类NSObject

### NSBundle
用于获取和使用文件路径的类
NSBundle内含有：info.plist，可执行文件，图像、图标、音频等资源文件
---
let mainBundle = NSBundle.mainBundle()
let FilePath = mainBundle.pathForResource("Personal", ofType: "jpg")
// 获取Personal.jpg的路径

let info = mainBundle.infoDictionary
//获得info.plist配置项词典对象实例
let bundleId: AnyObject? = mainBundle.objectForInfoDictionaryKey("CFBundleName")
// 获得应用程序的Bundle名

### NSTimeInterval
时间间隔，以秒为基本单位，是Double类型数字
---
let today = NSDate()
let timeInterval: NSTimeInterval = 86400
let yesterday = NSDate(timeInterval: -timeInterval, sinceDate: today)
let tomorrow = NSDate(timeInterval: timeInterval, sinceDate: today)

// 一天有86400秒，今天减86400秒是昨天，今天加86400秒是明天

### NSURL
资源地址，用于网络链接或者本地资源路径
---
let url = NSURL(string: "http://www.google.com")!
UIApplication.sharedApplication().openURL(url)
// 创建和打开网址

let urls: [NSURL] = NSFileManager.defaultManager().URLsForDirectory(.DocumentDirectory, inDomains: .UserDomainMask)
// 获取本地Document路径

### Set
无序集合类型。Array与之对应，是有序集合类型。
如果Set里出现了多个相同的值，运行时只保留一个
---
var anySet: Set = [1, 2, 3, "4", "5"]
var stringSet: Set<String> = ["4", "5"]

var duplicateSet: Set = [1, 1, 3, 3, 5, 5]
print(duplicateSet)

// 输出：[3, 1, 5]

### String
字符串类型，字符的序列，同时代表字符（Character）的合集
---
let text = "hello world"
let sentence = "这里是一段文字 123456 +-*/ :)"
// String类型的内容必须写在双引号里

print(String(sentence.characters.last!))
// 输出：)

### Void
指代空的元组
常用于返回值为空的函数，可以用()代替，或省略
---
func empty(a: Void) -> Void {
}
// 一个没有参数，也没返回值的函数，可以简写成：

func empty() -> () {
}

func empty() {
}

### UIControl
UIButton, UISwitch的父类，实现了target-action模式
---
let button = UIButton()
button.frame = CGRectMake(0, 0, 100, 100)
button.addTarget(self, action: #selector(buttonTapped), forControlEvents: .TouchUpInside)

// 给button添加目标后，点击按钮，将会触发self里的buttonTapped方法

### UIResponder
视图类（UIView）和视图控制器类（UIViewController）的父类，让其子类可以相应用户触发事件
---
public func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?)
public func touchesMoved(touches: Set<UITouch>, withEvent event: UIEvent?)
public func touchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?)
public func touchesCancelled(touches: Set<UITouch>?, withEvent event: UIEvent?)

// 以上都是UIResponder中的方法，当用户的手指接触屏幕、滑动手指、离开屏幕时这些方法会被调用

### UIWindow
管理屏幕显示内容的UIView子类，一个app默认一个window
---
func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {
	window = UIWindow(frame: UIScreen.mainScreen().bounds)
	window?.backgroundColor = UIColor.blackColor()

	let VC = viewController()
	window?.rootViewController = UINavigationController(rootViewController: VC)
	window?.makeKeyAndVisible()

	return true
}
// 当不用storyboard时，就要给AppDelegate里的window赋值，设置其rootViewController

### UIScreen
提供手机屏幕硬件方面信息的类，如分辨率、亮度
---
print(UIScreen.mainScreen().bounds.size)
// 输出：(320.0, 480.0) —— iPhone 4/4s
// 输出：(320.0, 568.0) —— iPhone 5/5s
// 输出：(375.0, 667.0) —— iPhone 6/6s
// 输出：(414.0, 736.0) —— iPhone 6 plus/6s plus
// 输出：(768.0, 1024.0) —— iPad

UIColor
UIKit中颜色管理类
注意iOS设备使用的是sRGB显示颜色
---
let red = UIColor.redColor() // 获取红色
view.backgroundColor = UIColor.blueColor() // 设置view的背景颜色为蓝色

extension UIColor {

	class func backgroundBlack() -> UIColor {
		return UIColor(red: 40/255, green: 42/255, blue: 55/255, alpha: 1.0)
	}

}
view.backgroundColor = UIColor.backgroundBlack()
// 创建和使用自定义颜色

### UIEvent
UIKit中用来响应事件的类。
iOS中有大体上有三类事件：屏幕感应事件、传感器感应事件、遥控事件（如耳机）
---
public enum UIEventType : Int {
	case Touches
	case Motion
	case RemoteControl
	@available(iOS 9.0, *)
	case Presses
}
// 系统提供的UIEvent类型

override func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) {
	print(event?.type)
}
// 通常在UIView中实现这个方法后，当点击屏幕就会打印出event的类型

### UIBezierPath
贝塞尔曲线，用来划线和自定义形状
---
import UIKit

class BezierView: UIView {
	override func drawRect(rect: CGRect) {
		super.drawRect(rect);
		var myBezier = UIBezierPath()
		myBezier.moveToPoint(CGPoint(x: 100, y: 100))
		myBezier.addLineToPoint(CGPoint(x: 200, y: 100))
		UIColor.orangeColor().setStroke()
		myBezier.stroke()
	}
}
// 画一条线

### UIFont
UIKit中字体管理类
---
let label = UILabel()
label.font = UIFont.systemFontOfSize(20)
// 设置label的字体为系统自带字体，字号20

extension UIFont {

	class func myFont(size: CGFloat) -> UIFont {
		return UIFont(name: "Menlo-Regular", size: size)!
	}
}
label.font = UIFont.myFont(17)
// 创建和使用自定义字体，先得把字体文件加入工程

### UIView
UIKit中的基础视图类，大部分显示控件都是它的子类，如UILabel，UITableView, UIWebView
代表屏幕上一片特定区域，渲染和管理这篇区域上的内容
---
let view = UIView() // 创建一个UIView
view.frame = CGRectMake(0, 0, 300, 500) // 设置位置和大小
view.backgroundColor = UIColor.grayColor() // 设置背景颜色
view.alpha = 0.8 // 设置透明度 0 ~ 1
view.userInteractionEnabled = false // 设置能否与用户交互

### UITableView
UIKit提供的视图类，用于显示按一列数行排放的信息，用户需要上下滑动进行查看
每一行称作一个cell,是UITableViewCell类
---
class tableViewController: UITableViewController {
	// UIKit提供UITableView视图控制器，方便开发

	override func viewDidLoad() {
		super.viewDidLoad()
		tableView = UITableView(frame: view.bounds)
		tableView.dataSource = self
		tableView.delegate = self
		tableView.backgroundColor = UIColor.clearColor()
		tableView.separatorStyle = .None
		// 常见UITableView设置
	}
}

### UIScrollView
UIKit提供的视图类，用于显示大于屏幕尺寸的内容，允许用户自由滑动查看内容
---
let scrollView = UIScrollView(frame: view.bounds)
scrollView.contentSize = CGSize(width: 1000, height: 1000)
// 设置contentSize大于frame.size，可以加载跟多内容
scrollView.directionalLockEnabled = true
scrollView.pagingEnabled = false
scrollView.scrollsToTop = false
scrollView.delegate = self
scrollView.decelerationRate = UIScrollViewDecelerationRateFast
// 常见scrollVIew设置

### UIButton
UIKit提供的按钮类，用来响应用户的点击、拖拽等操作
---
let button = UIButton()
button.addTarget(self, action: #selector(buttonTouched), forControlEvents: .TouchDown)
button.addTarget(self, action: #selector(buttonTouchUpOutside), forControlEvents: .TouchUpOutside)
button.addTarget(self, action: #selector(buttonTapped), forControlEvents: .TouchUpInside)
// 分别当用户按下按钮、按下移动在按钮外松开手指、在按钮内松开手指时，给按钮添加将要触发的方法

view.addSubview(button)

### UILabel
UIKit提供用来显示只读内容的类，可以显示一行或多行的文字
---
let label = UILabel()
label.text = "你好\n这是换行后的你好" // 内容，\n表示换行
label.numberOfLines = 0 // 当显示多行文字时，需要设置行数，0代表不限行数
label.font = UIFont.systemFontOfSize(20) // 字体
label.textColor = UIColor.blueColor() // 文字颜色
view.addSubview(label) // 添加进已显示的视图后，才能显示

// label常见设置

### UITextField
UIKit提供用来输入、编辑、显示一行文字内容的类
常用于用户名、密码输入框等
---
class viewController: UIViewController, UITextFieldDelegate {

	override func viewDidLoad() {
		super.viewDidLoad()
		let textField = UITextField(frame: CGRect(x: 0, y: 0, width: 300, height: 50))
		textField.delegate = self // viewController必须实现协议UITextFieldDelegate
		view.addSubview(textField)
	}

	func textFieldDidBeginEditing(textField: UITextField) {
		// 当textField开始编辑，这个方法将被调用。这只是UITextFieldDelegate中众多方法之一
	}

}

### UITextView
UIKit提供用来输入、编辑、显示多行文字内容的类，当内容很多时，用户可以上下滑动查看
---
let textView = UITextView()
textView.frame = CGRect(x: 0, y: 0, width: ScreenWidth, height: ScreenHeight)
textView.contentSize = CGSize(width: ScreenWidth, height: ScreenHeight * 3)
// 设置textView的位置和大小，以及显示内容区域的大小，ScreenWidth、ScreenHeight是自定义变量

textView.textContainerInset = UIEdgeInsets(top: 5, left: 5, bottom: 10, right: 5)
textView.text = "可以是大段大段的内容"
textView.tintColor = UIColor.redColor()
textView.font = UIFont.systemFontOfSize(18)
textView.editable = false // 设置文字内容能否被编辑
view.addSubview(textView)

### UIWebView
UIKit提供用于加载和显示网页内容的类
---
let webView = UIWebView(frame: view.bounds)
let url = NSURL(string: "http://www.stackoverflow.com")!
webView.loadRequest(NSURLRequest(URL: url))
view.addSubview(webView)

// 创建一个webView，并让其加载显示stackoverflow.com的内容

### UIViewController
视图控制器，UIKit提供用来管理视图的类，是管理视图同时也是管理App的框架
---
class viewController: UIViewController {

	override func viewDidLoad() {
		super.viewDidLoad()
		view.backgroundColor = UIColor.whiteColor()
		// 对视图和App数据的操作，大多都在viewController的生命周期中进行
	}

	func showAnotherViewController() {
		presentViewController(viewController(), animated: true, completion: nil)
		// viewController的呈现方法之一
	}

}

### UINavigationController
导航控制器，UIKit提供用来管理视图控制器的类
可以用来显示标题、放置导航按钮、管理工具栏等
---
let viewController = UIViewController()
let navigationController = UINavigationController(rootViewController: viewController)
// 声明一个UINavigationController

navigationController.pushViewController(viewController, animated: true)
// 用UINavigationController推出另一个视图控制器

navigationController.popViewControllerAnimated(true)
// 用UINavigationController来从一个视图控制器退出

### AVFoundation
系统提供用来管理音视频文件的框架
---
import AVFoundation

struct BackgroundSound {
	let sound: AVAudioPlayer // AVFoundation里用来管理音频文件的类

	init() {
		let soundPath = NSURL(fileURLWithPath: NSBundle.mainBundle().pathForResource("sound", ofType: "m4a")!)
		sound = try! AVAudioPlayer(contentsOfURL: soundPath)
	}

	func playSound(sound: AVAudioPlayer) {
		sound.stop()
		sound.currentTime = 0
		sound.volume = 0.65
		sound.prepareToPlay()
		sound.play()
		// 常用播放选项
	}
}

### CoreData
系统提供的数据持久化存储框架
它提供了对象-关系映射(ORM)的功能，即能够将对象转化成数据，也能够将保存在数据库中的数据还原成对象。
---
let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate
let managedContext = appDelegate.managedObjectContext

let fetchRequest = NSFetchRequest(entityName: "MyStory")
fetchRequest.entity = NSEntityDescription.entityForName("MyStory", inManagedObjectContext: managedContext)

do {
	if let result = try managedContext.executeFetchRequest(fetchRequest) as? [AnyObject] {
		// 在这里可以获取到数据，也可以对数据进行编辑、删除等操作
	}
} catch {
	print("can't get data")
}

### Contacts
系统提供和通讯录进行交互的框架，可以获取联系人的信息，还有地名等信息
---
import MapKit
import Contacts

func useAppleMap(lonAndLat: [Double], locationName: String) {
	let coor = CLLocationCoordinate2D(latitude: lonAndLat.0, longitude: lonAndLat.1)
	let placemark = MKPlacemark(coordinate: coor, addressDictionary: [CNPostalAddressStreetKey: locationName])
	// Contacts里用来创建地名的key
	// iOS 8及之前AddressBook的用法：addressDictionary: [kABPersonAddressStreetKey as String: locationName])
	let toLocation = MKMapItem(placemark: placemark)

	MKMapItem.openMapsWithItems([toLocation], launchOptions: [MKLaunchOptionsDirectionsModeKey: MKLaunchOptionsDirectionsModeDriving])
}

### Foundation
iOS开发的基础框架
---
import Foundation

let string = "/var/controller_driver/secret_photo.png" as NSString
let components = string.pathComponents as NSArray
let fileName = components.lastObject as NSString

// 复杂底层交互的框架，提供带NS开头的类型，其他框架如UIKit中已包含该框架

### MessageUI
系统提供用来实现发邮件、短信等功能的框架
---
import MessageUI

protocol MailSending: UserDefaults {
	func sendSupportEmail()
} // 一个实现发邮件功能的协议

extension MailSending where Self: UIViewController {
	func sendSupportEmail() {
		let controller = MFMailComposeViewController()
		controller.mailComposeDelegate = self
		controller.setSubject("邮件主题")
		controller.setMessageBody("邮件内容", isHTML: false)
		controller.setToRecipients(["pmlcfwcs@foxmail.com"])
		presentViewController(controller, animated: true, completion: nil)
	}
}

extension UIViewController: MFMailComposeViewControllerDelegate {
	public func mailComposeController(controller: MFMailComposeViewController, didFinishWithResult result: MFMailComposeResult, error: NSError?) {
		controller.dismissViewControllerAnimated(true, completion: nil)
	}
}

### MapKit
系统提供使用地图功能的框架
---
import MapKit

func useBaiduMap(userLocation: [Double], toLocation: [Double]) {
	let coor0 = CLLocationCoordinate2D(latitude: userLocation[0], longitude: userLocation[1])
	let coor1 = CLLocationCoordinate2D(latitude: toLocation[0], longitude: toLocation[1])

	let string = String(format: "baidumap://map/direction?origin=%@,%@&destination=%@,%@&mode=driving", "\(coor0.latitude)", "\(coor0.longitude)", "\(coor1.latitude)", "\(coor1.longitude)")
	UIApplication.sharedApplication().openURL(NSURL(string: string)!)
}
// 创建坐标，然后跳转百度导航的方法。使用系统系统自带地图，参见Contacts单词的例子

### StoreKit
系统提供的内购功能的框架
---
import StoreKit

public class IAPHelper: NSObject  {
	private var productsRequest: SKProductsRequest?

	public func purchaseProduct(product: SKProduct) {
		let payment = SKPayment(product: product)
		SKPaymentQueue.defaultQueue().addPayment(payment)
	}

	public class func canMakePayments() -> Bool {
		return SKPaymentQueue.canMakePayments()
	}
}
// StoreKit中一些常见类


### UIKit
系统提供的用于用户界面构建的框架
UI开头的类型都属于该框架，UIKit包含CoreGraphics，使用CG开头的类型，导入UIKit就可以
---
import UIKit

class viewController: UIViewController {

	override func viewDidLoad() {
		super.viewDidLoad()
		view = UIView(frame: CGRect(x: 0, y: 0, width: 375, height: 667))
		view.backgroundColor = UIColor.blackColor()
	}

}
// UIKit的常见使用场景

### alpha
视图的透明属性，值在0~1之间的CGFloat类型数字
---
let view = UIView()
view.backgroundColor = UIColor.redColor()
view.alpha = 1.0 // 不透明
view.alpha = 0.5 // 半透明
view.alpha = 0.0 // 透明

### bounds
视图在自身坐标系中的位置和大小，该视图bounds的坐标通常为(0, 0)
通过修改view的bounds属性可以修改本地坐标系统的原点位置，影响到的是它子view的位置和大小
---
let view1 = UIView(frame: CGRectMake(20, 20, 280, 250))
view1.bounds = CGRectMake(-20, -20, 280, 250)

let view2 = UIView(frame: CGRectMake(10, 10, 100, 100)) // frame是在父坐标系的坐标和大小
view1.addSubview(view2)

print(view1.bounds) // 输出：(-20.0, -20.0, 280.0, 250.0)
print(view2.bounds) // 输出：(0.0, 0.0, 100.0, 100.0)
// 每个view的默认bounds都为(0, 0)

### CG
CoreGraphics的缩写，为系统提供的矢量绘制框架，UIKit包含这个框架
---
var rect = CGRect(x: 20, y: 20, width: 300, height: 300)
rect.origin = CGPoint(x: 30, y: 30)
rect.size = CGSize(width: 500, height: 500)

// CG开头的类，属于CoreGraphics框架

### CA
CoreAnimation的缩写。
一个合成引擎，工作是尽可能快的将不同的可视化的内容合成到屏幕上。这个可视化内容是不同的层（layer），构成一个叫做层树（layer tree）的层次结构。
---
extension UIView {

	func addShadow() {
		self.layer.shadowRadius = 3
		self.layer.shadowOpacity = 0.3
		self.layer.shadowColor = UIColor.lightGrayColor().CGColor
		self.layer.shadowOffset = CGSizeMake(0, 0)
	}
	// UIView的属性layer是CALayer类，常见作用是加阴影、加圆角等
}

frame
视图的属性之一，代表视图在父视图坐标系中的位置和大小
---
let view1 = UIView(frame: CGRectMake(20, 20, 280, 250))

let view2 = UIView(frame: CGRectMake(10, 10, 100, 100)) // frame是在父坐标系的坐标和大小
view1.addSubview(view2)

print(view1.frame) // 输出：(20, 20, 280, 250)
print(view2.frame) // 输出：(10, 10, 100, 100)
// 假设view1的左上角离屏幕边缘的距离是20，那么view2离屏幕边缘的距离为30

### NS
NeXTSTEP的缩写，为乔布斯创立的公司的产品，该公司后被苹果收购
在OC中为了不和其他已有类型冲突，很多类型加上NS前缀加以区分
---

class Object: NSObject {
	let number: NSNumber = 123
	let text: NSString = "hello"
	let array: NSArray = [1, 2, 3]
}

// 常见的有NS前缀的类型

### navigationBar
导航栏，特指iOS应用里高为64（加上状态栏）的导航栏
是UINavigationController的一个属性
---
let rootViewController = UIViewController()
let navi = UINavigationController(rootViewController: rootViewController)
navi.navigationBar.barStyle = .BlackTranslucent
navi.navigationBar.tintColor = UIColor.whiteColor()
navi.navigationBar.translucent = true

// navigationBar的常见设置

### statusBar
状态栏，指屏幕顶部用于显示运营商、时间、电池等信息的状态栏，高度为20
---
override func prefersStatusBarHidden() -> Bool {
	return false
}
// 决定状态栏隐藏还是显示

override func preferredStatusBarStyle() -> UIStatusBarStyle {
	return .Default
}
// 状态栏背景默认透明，文字颜色只有白色和黑色（默认）

tintColor
视图的颜色属性，可以理解为主题色
---
import UIKit

class NavigationController: UINavigationController {

	override func viewDidLoad() {
		super.viewDidLoad()
		navigationBar.barTintColor = UIColor.backgroundBlack()
		navigationBar.tintColor = UIColor.whiteColor()
	}

}

// barTintColor通常指背景颜色
// navigationBar的tintColor决定的是标题文字的颜色和导航按钮的颜色

### toolbar
工具栏，UINavigationController的属性之一，指屏幕低端高44显示操作按钮的工具栏
---
override func viewWillAppear(animated: Bool) {
	super.viewWillAppear(animated)
	let space = UIBarButtonItem(barButtonSystemItem: .FlexibleSpace, target: nil, action: nil)
	setToolbarItems([space, space, space], animated: true)

	navigationController?.toolbar.tintColor = UIColor.plainWhite()
	navigationController?.setToolbarHidden(false, animated: true)
}

// 常见的toolBar设置

### UI
User Interface的缩写，交互界面的意思，常用作为类型的前缀
---
import UIKit

class viewController: UIViewController {

	override func viewDidLoad() {
		super.viewDidLoad()
		view = UIView()
		let tableView = UITableView()
		let scrollView = UIScrollView()
		let webView = UIWebView()
	}

}

// UI前缀的类型非常常见



